################################################################################
# Delta Adaptive Bed Mesh
#
# Creates an adaptive mezh that covers the print area only
# Params are for testing / debugging only
# DELTA_ADAPTIVE_BED_MESH [RADIUS=<INT>] [CENTER_X=<INT>] [CENTER_Y=<INT>]
################################################################################
[gcode_macro DELTA_ADAPTIVE_BED_MESH]
description: Adaptive meshing for deltas
gcode:

    # Testing params
    {% set P_RADIUS = params.RADIUS | default(0) | int %}
    {% set P_CENTER_X = params.CENTER_X | default(0) | int %}
    {% set P_CENTER_Y = params.CENTER_Y | default(0) | int %}

    # Get center of bed
    {% set bed_center_x = printer.toolhead.axis_minimum.x + printer.toolhead.axis_maximum.x  | int %}
    {% set bed_center_y = printer.toolhead.axis_minimum.y + printer.toolhead.axis_maximum.y  | int %}
    
    # Bed mesh and probe values
    {% set bed_mesh_radius = printer.configfile.settings.bed_mesh.mesh_radius | int %}
    {% set probe_count = printer.configfile.settings.bed_mesh.round_probe_count | int %}
    {% set probe_offset_x = printer.configfile.settings.probe.x_offset | int %}
    {% set probe_offset_y = printer.configfile.settings.probe.y_offset | int %}
    {% set probe_offset_max = [probe_offset_x | abs, probe_offset_y | abs ] | max %} 

    # Get print objects and calculate min/max x/y
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %} 
    {% set min_x = all_points | map(attribute=0) | min | default(bed_center_x) %}
    {% set min_y = all_points | map(attribute=1) | min | default(bed_center_y) %}
    {% set max_x = all_points | map(attribute=0) | max | default(bed_center_x) %}
    {% set max_y = all_points | map(attribute=1) | max | default(bed_center_y) %}   

    # Find center point and radius needed to cover all objects
    {% set center_x = ((max_x + min_x) / 2) | int %}
    {% set center_y = ((max_y + min_y) / 2) | int %}
    {% set radius_x = ((max_x - min_x) / 2) | int %}
    {% set radius_y = ((max_y - min_y) / 2) | int %}
    {% set radius_max = [radius_x, radius_y ] | max %}    

    # Overide radius with param value
    {% if P_RADIUS > 0 and P_RADIUS <= bed_mesh_radius %}
        {% set radius_max = P_RADIUS | int %}
    {% endif %}

    # Overide center x/y wirh param values
    {% if P_CENTER_X != 0 or P_CENTER_Y != 0 %}
        {% if radius_max + (P_CENTER_X | abs) <= bed_mesh_radius %}
            {% set center_x = P_CENTER_X | int %}
        {% endif %}
        {% if radius_max + (P_CENTER_Y | abs) <= bed_mesh_radius %}
            {% set center_y = P_CENTER_Y | int %}
        {% endif %}
    {% endif %}

    # Check radius amd assign to final variable 
    {% if radius_max > bed_mesh_radius or radius_max == 0 %}
        {% set mesh_radius = 90 | int %}
    {% else %}
        {% set mesh_radius = radius_max | int %}
    {% endif %}

    # Calculate probe count for radius adjustimg for set value
    {% set round_probe_count = ((mesh_radius /10) * (probe_count / (bed_mesh_radius / 10))) | round(0) | int %}

    # Min is 3 probes
    {% if round_probe_count < 4 %}
        {% set round_probe_count = 3 | int %}
    # Max is set value 8n config
    {% elif round_probe_count > probe_count %}
        {% set round_probe_count = probe_count | int %}
    # Must be an odd number
    {% elif round_probe_count is even %}
        {% set round_probe_count = (round_probe_count - 1) | int %}
    {% endif %}

    # If needed use probe offsets else start probe at center of print area
    {% if mesh_radius + probe_offset_max > bed_mesh_radius - 5 %}
        {% set mesh_origin_x = probe_offset_x | int %}
        {% set mesh_origin_y = probe_offset_y | int %}
    {% else %}
        {% set mesh_origin_x = center_x | int %}
        {% set mesh_origin_y = center_y | int %}
    {% endif %}

    # Switch to bicubic beyond 5 points
    {% if probe_count > 5 %}
        {% set algorithm = "bicubic" %} 
    {% else %}
        {% set algorithm = "lagrange" %}
    {% endif %} 

    # Info to terminal
    { action_respond_info('Round Probe Count: %s' % (round_probe_count)) }

    # Call bed mesh calibrate with calculated values
    BED_MESH_CALIBRATE PROFILE=DELTA_ADAPTIVE MESH_RADIUS={mesh_radius} MESH_ORIGIN={mesh_origin_x},{mesh_origin_y} ROUND_PROBE_COUNT={round_probe_count} ALGORITHM={algorithm} 
